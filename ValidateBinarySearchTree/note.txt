Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.

Demoe1
public class Solution {
    public boolean isValidBST(TreeNode root) {
        return isValidBST(root, Long.MAX_VALUE, Long.MIN_VALUE );
    }
    public boolean isValidBST (TreeNode node, long max, long min){
        if(node == null)
            return true;
        if(node.val >= max || node.val <= min)
            return false;
        return isValidBST(node.left, node.val, min) && isValidBST(node.right, max, node.val);
    }
}
先序遍历： 先中，后左，再右

中序遍历： 先左，后中，再右

后序遍历： 先左，后右，再中

在这里用了中序遍历，在遍历的过程中传入参数，最大值和最小值。在遍历过程中，实时更新最大值和最小值。

节点的val值，应小于最大值，大于最小值。

当传入左子节点时，应更新最大值，左子节点的val应小于当前节点的val。

当传入右子节点时，应更新最小值，右子节点的val应大于当前节点的val。

BFS和DFS

广度优先搜索-BFS：应采用队列，先进后出。

深度优先搜索-DFS：应采用栈，先进先出


Demoe2
public class Solution {
    public boolean isValidBST(TreeNode root) {
        if(root == null)
           return true;
        return isValidBST(root, Long.MAX_VALUE, Long.MIN_VALUE);
    }
    public boolean isValidBST (TreeNode node, long max, long min){
        if(node == null)
            return true;
        if(node.val <= min || node.val >= max){
            return false;
        }
        if(node.left != null){
            if(node.left.val >= node.val)
                return false;
        }
        if(node.right != null){
            if(node.right.val <= node.val)
                return false;
        }
        return isValidBST(node.left, node.val , min) && isValidBST(node.right, max, node.val);
    }
}